#BlueJ class context
comment0.target=JSONWriter
comment0.text=\r\n\ JSONWriter\ provides\ a\ quick\ and\ convenient\ way\ of\ producing\ JSON\ text.\r\n\ The\ texts\ produced\ strictly\ conform\ to\ JSON\ syntax\ rules.\ No\ whitespace\ is\r\n\ added,\ so\ the\ results\ are\ ready\ for\ transmission\ or\ storage.\ Each\ instance\ of\r\n\ JSONWriter\ can\ produce\ one\ JSON\ text.\r\n\ <p>\r\n\ A\ JSONWriter\ instance\ provides\ a\ <code>value</code>\ method\ for\ appending\r\n\ values\ to\ the\r\n\ text,\ and\ a\ <code>key</code>\r\n\ method\ for\ adding\ keys\ before\ values\ in\ objects.\ There\ are\ <code>array</code>\r\n\ and\ <code>endArray</code>\ methods\ that\ make\ and\ bound\ array\ values,\ and\r\n\ <code>object</code>\ and\ <code>endObject</code>\ methods\ which\ make\ and\ bound\r\n\ object\ values.\ All\ of\ these\ methods\ return\ the\ JSONWriter\ instance,\r\n\ permitting\ a\ cascade\ style.\ For\ example,\ <pre>\r\n\ new\ JSONWriter(myWriter)\r\n\ \ \ \ \ .object()\r\n\ \ \ \ \ \ \ \ \ .key("JSON")\r\n\ \ \ \ \ \ \ \ \ .value("Hello,\ World\!")\r\n\ \ \ \ \ .endObject();</pre>\ which\ writes\ <pre>\r\n\ {"JSON"\:"Hello,\ World\!"}</pre>\r\n\ <p>\r\n\ The\ first\ method\ called\ must\ be\ <code>array</code>\ or\ <code>object</code>.\r\n\ There\ are\ no\ methods\ for\ adding\ commas\ or\ colons.\ JSONWriter\ adds\ them\ for\r\n\ you.\ Objects\ and\ arrays\ can\ be\ nested\ up\ to\ 200\ levels\ deep.\r\n\ <p>\r\n\ This\ can\ sometimes\ be\ easier\ than\ using\ a\ JSONObject\ to\ build\ a\ string.\r\n\ @author\ JSON.org\r\n\ @version\ 2016-08-08\r\n
comment1.params=w
comment1.target=JSONWriter(java.lang.Appendable)
comment1.text=\r\n\ Make\ a\ fresh\ JSONWriter.\ It\ can\ be\ used\ to\ build\ one\ JSON\ text.\r\n
comment10.params=jo
comment10.target=void\ push(JSONObject)
comment10.text=\r\n\ Push\ an\ array\ or\ object\ scope.\r\n\ @param\ jo\ The\ scope\ to\ open.\r\n\ @throws\ JSONException\ If\ nesting\ is\ too\ deep.\r\n
comment11.params=b
comment11.target=JSONWriter\ value(boolean)
comment11.text=\r\n\ Append\ either\ the\ value\ <code>true</code>\ or\ the\ value\r\n\ <code>false</code>.\r\n\ @param\ b\ A\ boolean.\r\n\ @return\ this\r\n\ @throws\ JSONException\r\n
comment12.params=d
comment12.target=JSONWriter\ value(double)
comment12.text=\r\n\ Append\ a\ double\ value.\r\n\ @param\ d\ A\ double.\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ the\ number\ is\ not\ finite.\r\n
comment13.params=l
comment13.target=JSONWriter\ value(long)
comment13.text=\r\n\ Append\ a\ long\ value.\r\n\ @param\ l\ A\ long.\r\n\ @return\ this\r\n\ @throws\ JSONException\r\n
comment14.params=object
comment14.target=JSONWriter\ value(java.lang.Object)
comment14.text=\r\n\ Append\ an\ object\ value.\r\n\ @param\ object\ The\ object\ to\ append.\ It\ can\ be\ null,\ or\ a\ Boolean,\ Number,\r\n\ \ \ String,\ JSONObject,\ or\ JSONArray,\ or\ an\ object\ that\ implements\ JSONString.\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ the\ value\ is\ out\ of\ sequence.\r\n
comment2.params=string
comment2.target=JSONWriter\ append(java.lang.String)
comment2.text=\r\n\ Append\ a\ value.\r\n\ @param\ string\ A\ string\ value.\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ the\ value\ is\ out\ of\ sequence.\r\n
comment3.params=
comment3.target=JSONWriter\ array()
comment3.text=\r\n\ Begin\ appending\ a\ new\ array.\ All\ values\ until\ the\ balancing\r\n\ <code>endArray</code>\ will\ be\ appended\ to\ this\ array.\ The\r\n\ <code>endArray</code>\ method\ must\ be\ called\ to\ mark\ the\ array's\ end.\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ the\ nesting\ is\ too\ deep,\ or\ if\ the\ object\ is\r\n\ started\ in\ the\ wrong\ place\ (for\ example\ as\ a\ key\ or\ after\ the\ end\ of\ the\r\n\ outermost\ array\ or\ object).\r\n
comment4.params=m\ c
comment4.target=JSONWriter\ end(char,\ char)
comment4.text=\r\n\ End\ something.\r\n\ @param\ m\ Mode\r\n\ @param\ c\ Closing\ character\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ unbalanced.\r\n
comment5.params=
comment5.target=JSONWriter\ endArray()
comment5.text=\r\n\ End\ an\ array.\ This\ method\ most\ be\ called\ to\ balance\ calls\ to\r\n\ <code>array</code>.\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ incorrectly\ nested.\r\n
comment6.params=
comment6.target=JSONWriter\ endObject()
comment6.text=\r\n\ End\ an\ object.\ This\ method\ most\ be\ called\ to\ balance\ calls\ to\r\n\ <code>object</code>.\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ incorrectly\ nested.\r\n
comment7.params=string
comment7.target=JSONWriter\ key(java.lang.String)
comment7.text=\r\n\ Append\ a\ key.\ The\ key\ will\ be\ associated\ with\ the\ next\ value.\ In\ an\r\n\ object,\ every\ value\ must\ be\ preceded\ by\ a\ key.\r\n\ @param\ string\ A\ key\ string.\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ the\ key\ is\ out\ of\ place.\ For\ example,\ keys\r\n\ \ do\ not\ belong\ in\ arrays\ or\ if\ the\ key\ is\ null.\r\n
comment8.params=
comment8.target=JSONWriter\ object()
comment8.text=\r\n\ Begin\ appending\ a\ new\ object.\ All\ keys\ and\ values\ until\ the\ balancing\r\n\ <code>endObject</code>\ will\ be\ appended\ to\ this\ object.\ The\r\n\ <code>endObject</code>\ method\ must\ be\ called\ to\ mark\ the\ object's\ end.\r\n\ @return\ this\r\n\ @throws\ JSONException\ If\ the\ nesting\ is\ too\ deep,\ or\ if\ the\ object\ is\r\n\ started\ in\ the\ wrong\ place\ (for\ example\ as\ a\ key\ or\ after\ the\ end\ of\ the\r\n\ outermost\ array\ or\ object).\r\n
comment9.params=c
comment9.target=void\ pop(char)
comment9.text=\r\n\ Pop\ an\ array\ or\ object\ scope.\r\n\ @param\ c\ The\ scope\ to\ close.\r\n\ @throws\ JSONException\ If\ nesting\ is\ wrong.\r\n
numComments=15
