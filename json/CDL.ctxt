#BlueJ class context
comment0.target=CDL
comment0.text=\r\n\ This\ provides\ static\ methods\ to\ convert\ comma\ delimited\ text\ into\ a\r\n\ JSONArray,\ and\ to\ convert\ a\ JSONArray\ into\ comma\ delimited\ text.\ Comma\r\n\ delimited\ text\ is\ a\ very\ popular\ format\ for\ data\ interchange.\ It\ is\r\n\ understood\ by\ most\ database,\ spreadsheet,\ and\ organizer\ programs.\r\n\ <p>\r\n\ Each\ row\ of\ text\ represents\ a\ row\ in\ a\ table\ or\ a\ data\ record.\ Each\ row\r\n\ ends\ with\ a\ NEWLINE\ character.\ Each\ row\ contains\ one\ or\ more\ values.\r\n\ Values\ are\ separated\ by\ commas.\ A\ value\ can\ contain\ any\ character\ except\r\n\ for\ comma,\ unless\ is\ is\ wrapped\ in\ single\ quotes\ or\ double\ quotes.\r\n\ <p>\r\n\ The\ first\ row\ usually\ contains\ the\ names\ of\ the\ columns.\r\n\ <p>\r\n\ A\ comma\ delimited\ list\ can\ be\ converted\ into\ a\ JSONArray\ of\ JSONObjects.\r\n\ The\ names\ for\ the\ elements\ in\ the\ JSONObjects\ can\ be\ taken\ from\ the\ names\r\n\ in\ the\ first\ row.\r\n\ @author\ JSON.org\r\n\ @version\ 2016-05-01\r\n
comment1.params=x
comment1.target=java.lang.String\ getValue(JSONTokener)
comment1.text=\r\n\ Get\ the\ next\ value.\ The\ value\ can\ be\ wrapped\ in\ quotes.\ The\ value\ can\r\n\ be\ empty.\r\n\ @param\ x\ A\ JSONTokener\ of\ the\ source\ text.\r\n\ @return\ The\ value\ string,\ or\ null\ if\ empty.\r\n\ @throws\ JSONException\ if\ the\ quoted\ string\ is\ badly\ formed.\r\n
comment10.params=names\ ja
comment10.target=java.lang.String\ toString(JSONArray,\ JSONArray)
comment10.text=\r\n\ Produce\ a\ comma\ delimited\ text\ from\ a\ JSONArray\ of\ JSONObjects\ using\r\n\ a\ provided\ list\ of\ names.\ The\ list\ of\ names\ is\ not\ included\ in\ the\r\n\ output.\r\n\ @param\ names\ A\ JSONArray\ of\ strings.\r\n\ @param\ ja\ A\ JSONArray\ of\ JSONObjects.\r\n\ @return\ A\ comma\ delimited\ text.\r\n\ @throws\ JSONException\r\n
comment2.params=x
comment2.target=JSONArray\ rowToJSONArray(JSONTokener)
comment2.text=\r\n\ Produce\ a\ JSONArray\ of\ strings\ from\ a\ row\ of\ comma\ delimited\ values.\r\n\ @param\ x\ A\ JSONTokener\ of\ the\ source\ text.\r\n\ @return\ A\ JSONArray\ of\ strings.\r\n\ @throws\ JSONException\r\n
comment3.params=names\ x
comment3.target=JSONObject\ rowToJSONObject(JSONArray,\ JSONTokener)
comment3.text=\r\n\ Produce\ a\ JSONObject\ from\ a\ row\ of\ comma\ delimited\ text,\ using\ a\r\n\ parallel\ JSONArray\ of\ strings\ to\ provides\ the\ names\ of\ the\ elements.\r\n\ @param\ names\ A\ JSONArray\ of\ names.\ This\ is\ commonly\ obtained\ from\ the\r\n\ \ first\ row\ of\ a\ comma\ delimited\ text\ file\ using\ the\ rowToJSONArray\r\n\ \ method.\r\n\ @param\ x\ A\ JSONTokener\ of\ the\ source\ text.\r\n\ @return\ A\ JSONObject\ combining\ the\ names\ and\ values.\r\n\ @throws\ JSONException\r\n
comment4.params=ja
comment4.target=java.lang.String\ rowToString(JSONArray)
comment4.text=\r\n\ Produce\ a\ comma\ delimited\ text\ row\ from\ a\ JSONArray.\ Values\ containing\r\n\ the\ comma\ character\ will\ be\ quoted.\ Troublesome\ characters\ may\ be\r\n\ removed.\r\n\ @param\ ja\ A\ JSONArray\ of\ strings.\r\n\ @return\ A\ string\ ending\ in\ NEWLINE.\r\n
comment5.params=string
comment5.target=JSONArray\ toJSONArray(java.lang.String)
comment5.text=\r\n\ Produce\ a\ JSONArray\ of\ JSONObjects\ from\ a\ comma\ delimited\ text\ string,\r\n\ using\ the\ first\ row\ as\ a\ source\ of\ names.\r\n\ @param\ string\ The\ comma\ delimited\ text.\r\n\ @return\ A\ JSONArray\ of\ JSONObjects.\r\n\ @throws\ JSONException\r\n
comment6.params=x
comment6.target=JSONArray\ toJSONArray(JSONTokener)
comment6.text=\r\n\ Produce\ a\ JSONArray\ of\ JSONObjects\ from\ a\ comma\ delimited\ text\ string,\r\n\ using\ the\ first\ row\ as\ a\ source\ of\ names.\r\n\ @param\ x\ The\ JSONTokener\ containing\ the\ comma\ delimited\ text.\r\n\ @return\ A\ JSONArray\ of\ JSONObjects.\r\n\ @throws\ JSONException\r\n
comment7.params=names\ string
comment7.target=JSONArray\ toJSONArray(JSONArray,\ java.lang.String)
comment7.text=\r\n\ Produce\ a\ JSONArray\ of\ JSONObjects\ from\ a\ comma\ delimited\ text\ string\r\n\ using\ a\ supplied\ JSONArray\ as\ the\ source\ of\ element\ names.\r\n\ @param\ names\ A\ JSONArray\ of\ strings.\r\n\ @param\ string\ The\ comma\ delimited\ text.\r\n\ @return\ A\ JSONArray\ of\ JSONObjects.\r\n\ @throws\ JSONException\r\n
comment8.params=names\ x
comment8.target=JSONArray\ toJSONArray(JSONArray,\ JSONTokener)
comment8.text=\r\n\ Produce\ a\ JSONArray\ of\ JSONObjects\ from\ a\ comma\ delimited\ text\ string\r\n\ using\ a\ supplied\ JSONArray\ as\ the\ source\ of\ element\ names.\r\n\ @param\ names\ A\ JSONArray\ of\ strings.\r\n\ @param\ x\ A\ JSONTokener\ of\ the\ source\ text.\r\n\ @return\ A\ JSONArray\ of\ JSONObjects.\r\n\ @throws\ JSONException\r\n
comment9.params=ja
comment9.target=java.lang.String\ toString(JSONArray)
comment9.text=\r\n\ Produce\ a\ comma\ delimited\ text\ from\ a\ JSONArray\ of\ JSONObjects.\ The\r\n\ first\ row\ will\ be\ a\ list\ of\ names\ obtained\ by\ inspecting\ the\ first\r\n\ JSONObject.\r\n\ @param\ ja\ A\ JSONArray\ of\ JSONObjects.\r\n\ @return\ A\ comma\ delimited\ text.\r\n\ @throws\ JSONException\r\n
numComments=11
